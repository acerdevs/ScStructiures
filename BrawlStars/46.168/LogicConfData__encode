{
  _DWORD *v2; // r5
  int v3; // r4
  int v4; // r6
  int v5; // r6
  int v6; // r6
  int v7; // r6
  int v8; // r6
  int v9; // r6
  int v10; // r6
  int v11; // r6
  int v12; // r6
  int v13; // r6
  int v14; // r6
  int v15; // r6
  int v16; // r6
  int v17; // r6
  signed int result; // r0
  signed int v19; // r6

  v2 = a1;
  v3 = a2;
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 68))(a2, *a1);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, v2[3]);
  if ( v2[3] >= 1 )
  {
    v4 = 0;
    do
      EventSlot::encode(*(_DWORD **)(v2[1] + 4 * v4++), v3);
    while ( v4 < v2[3] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, v2[6]);
  if ( v2[6] >= 1 )
  {
    v5 = 0;
    do
      LogicEventData::encode(*(_DWORD **)(v2[4] + 4 * v5++), v3);
    while ( v5 < v2[6] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, v2[9]);
  if ( v2[9] >= 1 )
  {
    v6 = 0;
    do
      LogicEventData::encode(*(_DWORD **)(v2[7] + 4 * v6++), v3);
    while ( v6 < v2[9] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, v2[12]);
  if ( v2[12] >= 1 )
  {
    v7 = 0;
    do
      (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, *(_DWORD *)(v2[10] + 4 * v7++));
    while ( v7 < v2[12] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, v2[15]);
  if ( v2[15] >= 1 )
  {
    v8 = 0;
    do
      (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, *(_DWORD *)(v2[13] + 4 * v8++));
    while ( v8 < v2[15] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, v2[18]);
  if ( v2[18] >= 1 )
  {
    v9 = 0;
    do
      (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, *(_DWORD *)(v2[16] + 4 * v9++));
    while ( v9 < v2[18] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 32))(v3, *((unsigned __int8 *)v2 + 112));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, v2[31]);
  if ( v2[31] >= 1 )
  {
    v10 = 0;
    do
      ReleaseEntry::encode(*(_DWORD *)(v2[29] + 4 * v10++), v3);
    while ( v10 < v2[31] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, v2[34]);
  if ( v2[34] >= 1 )
  {
    v11 = 0;
    do
      IntValueEntry::encode(*(_DWORD *)(v2[32] + 4 * v11++), v3);
    while ( v11 < v2[34] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, v2[37]);
  if ( v2[37] >= 1 )
  {
    v12 = 0;
    do
      TimedIntValueEntry::encode(*(_DWORD *)(v2[35] + 4 * v12++), v3);
    while ( v12 < v2[37] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, v2[40]);
  if ( v2[40] >= 1 )
  {
    v13 = 0;
    do
      CustomEvent::encode(*(_DWORD **)(v2[38] + 4 * v13++), v3);
    while ( v13 < v2[40] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, v2[21]);
  if ( v2[21] >= 1 )
  {
    v14 = 0;
    do
      (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, *(_DWORD *)(v2[19] + 4 * v14++));
    while ( v14 < v2[21] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, v2[24]);
  if ( v2[24] >= 1 )
  {
    v15 = 0;
    do
      (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, *(_DWORD *)(v2[22] + 4 * v15++));
    while ( v15 < v2[24] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, v2[27]);
  if ( v2[27] >= 1 )
  {
    v16 = 0;
    do
      (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, *(_DWORD *)(v2[25] + 4 * v16++));
    while ( v16 < v2[27] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, v2[43]);
  if ( v2[43] >= 1 )
  {
    v17 = 0;
    do
      (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, *(_DWORD *)(v2[41] + 4 * v17++));
    while ( v17 < v2[43] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, v2[46]);
  result = v2[46];
  if ( result >= 1 )
  {
    v19 = 0;
    do
    {
      (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 68))(v3, *(_DWORD *)(v2[44] + 4 * v19));
      result = v2[46];
      ++v19;
    }
    while ( v19 < result );
  }
  return result;
}
