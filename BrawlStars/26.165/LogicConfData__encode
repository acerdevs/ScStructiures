{
  _DWORD *v2; // r5
  int v3; // r4
  int v4; // r6
  int v5; // r6
  int v6; // r6
  int v7; // r6
  int v8; // r6
  signed int result; // r0
  signed int v10; // r6

  v2 = a1;
  v3 = a2;
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 64))(a2, *a1);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[1]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[2]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[3]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[4]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[5]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[6]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[7]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[8]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[9]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[10]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[11]);
  Unk(v3, v2 + 12);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[17]);
  if ( v2[17] >= 1 )
  {
    v4 = 0;
    do
      EventDataSlot::encode(*(_DWORD *)(v2[15] + 4 * v4++), v3);
    while ( v4 < v2[17] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[20]);
  if ( v2[20] >= 1 )
  {
    v5 = 0;
    do
      EventData::encode(*(_DWORD *)(v2[18] + 4 * v5++), v3);
    while ( v5 < v2[20] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[23]);
  if ( v2[23] >= 1 )
  {
    v6 = 0;
    do
      EventData::encode(*(_DWORD *)(v2[21] + 4 * v6++), v3);
    while ( v6 < v2[23] );
  }
  Unk(v3, v2 + 24);
  Unk(v3, v2 + 27);
  Unk(v3, v2 + 30);
  Unk(v3, v2 + 33);
  Unk(v3, v2 + 36);
  Unk(v3, v2 + 39);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[42]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[43]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[44]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[45]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[46]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[47]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 32))(v3, *((unsigned __int8 *)v2 + 192));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 32))(v3, *((unsigned __int8 *)v2 + 193));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 32))(v3, *((unsigned __int8 *)v2 + 194));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[49]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[50]);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 32))(v3, *((unsigned __int8 *)v2 + 204));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[54]);
  if ( v2[54] >= 1 )
  {
    v7 = 0;
    do
      ReleaseEntry::encode(*(_DWORD *)(v2[52] + 4 * v7++), v3);
    while ( v7 < v2[54] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[57]);
  if ( v2[57] >= 1 )
  {
    v8 = 0;
    do
      IntValueEntry::encode(*(_DWORD *)(v2[55] + 4 * v8++), v3);
    while ( v8 < v2[57] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)v3 + 64))(v3, v2[60]);
  result = v2[60];
  if ( result >= 1 )
  {
    v10 = 0;
    do
    {
      TimedIntValueEntry::encode(*(_DWORD *)(v2[58] + 4 * v10), v3);
      result = v2[60];
      ++v10;
    }
    while ( v10 < result );
  }
  return result;
}
