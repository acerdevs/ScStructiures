{
  int v4; // r6
  int v5; // r6
  int v6; // r1
  _DWORD *v7; // r0
  int v8; // r8
  int v9; // r1
  unsigned int v10; // r7
  unsigned int v11; // r6
  unsigned int v12; // r0
  unsigned int v13; // r2
  int v14; // r10
  unsigned int v15; // r9
  int v16; // r1
  _DWORD *v17; // r0
  _DWORD *v18; // r9
  unsigned int v19; // r0
  unsigned int v20; // r1
  int v21; // r1
  int v22; // r6
  int v23; // r6
  int v24; // r6
  int v25; // r0
  int v26; // r0
  _DWORD *v27; // r0
  int v28; // r6
  _DWORD *v29; // r0
  int v30; // r6
  int v31; // r6
  int v32; // r6
  int v33; // r6
  int v34; // r6
  int v35; // r6
  int v36; // r0
  int v37; // r0
  int v38; // r0
  void **v40; // [sp+8h] [bp-20h]

  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)a1);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 4));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 8));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0xC));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x10));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x14));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x18));
  WriteDataReference(a2, *(_DWORD *)(a1 + 0x1C));
  WriteDataReference(a2, *(_DWORD *)(a1 + 0x20));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x2C));
  if ( *(int *)(a1 + 0x2C) >= 1 )
  {
    v4 = 0;
    do
      (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(*(_DWORD *)(a1 + 0x24) + 4 * v4++));
    while ( v4 < *(_DWORD *)(a1 + 0x2C) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x38));
  if ( *(int *)(a1 + 0x38) >= 1 )
  {
    v5 = 0;
    do
      WriteDataReference(a2, *(_DWORD *)(*(_DWORD *)(a1 + 0x30) + 4 * v5++));
    while ( v5 < *(_DWORD *)(a1 + 0x38) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 64))(a2, *(_DWORD *)(a1 + 0x48));
  if ( *(int *)(a1 + 0x48) > 0 )
  {
    v6 = sub_9E26CC();
    v7 = *(_DWORD **)v6;
    v40 = (void **)v6;
    if ( *(int *)(v6 + 8) >= 1 )
    {
      v8 = 0;
      do
      {
        v10 = v7[v8];
        (*(void (__fastcall **)(int, unsigned int))(*(_DWORD *)a2 + 0x40))(a2, v10);
        v11 = *(_DWORD *)(a1 + 0x40);
        v9 = 0;
        if ( v11 )
        {
          v12 = ((v11 - ((v11 >> 1) & 0x55555555)) & 0x33333333)
              + (((v11 - ((v11 >> 1) & 0x55555555)) >> 2) & 0x33333333);
          v13 = (0x1010101 * ((v12 + (v12 >> 4)) & 0xF0F0F0F)) >> 0x18;
          if ( v13 <= 1 )
          {
            v14 = (v11 - 1) & v10;
          }
          else
          {
            v14 = v10;
            if ( v10 >= v11 )
            {
              v15 = (0x1010101 * ((v12 + (v12 >> 4)) & 0xF0F0F0F)) >> 0x18;
              sub_B3CA74(v10, *(_DWORD *)(a1 + 0x40));
              v13 = v15;
              v14 = v16;
            }
          }
          v9 = 0;
          v17 = *(_DWORD **)(*(_DWORD *)(a1 + 0x3C) + 4 * v14);
          if ( v17 )
          {
            v18 = (_DWORD *)*v17;
            v9 = 0;
            if ( *v17 )
            {
              if ( v13 <= 1 )
              {
                while ( 1 )
                {
                  v21 = v18[1];
                  if ( v10 == v21 )
                  {
                    if ( v18[2] == v10 )
                      goto LABEL_33;
                  }
                  else if ( (v21 & (v11 - 1)) != v14 )
                  {
                    goto LABEL_10;
                  }
                  v18 = (_DWORD *)*v18;
                  if ( !v18 )
                    goto LABEL_10;
                }
              }
              while ( 1 )
              {
                v19 = v18[1];
                if ( v10 == v19 )
                {
                  if ( v18[2] == v10 )
                  {
LABEL_33:
                    v9 = v18[3];
                    break;
                  }
                }
                else
                {
                  if ( v19 >= v11 )
                  {
                    sub_B3CA74(v19, v11);
                    v19 = v20;
                  }
                  if ( v19 != v14 )
                  {
LABEL_10:
                    v9 = 0;
                    break;
                  }
                }
                v18 = (_DWORD *)*v18;
                if ( !v18 )
                  goto LABEL_10;
              }
            }
          }
        }
        WriteDataReference(a2, v9);
        ++v8;
        v7 = *v40;
      }
      while ( v8 < (int)v40[2] );
    }
    if ( v7 )
      operator delete[](v7);
    operator delete(v40);
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x58));
  if ( *(int *)(a1 + 0x58) >= 1 )
  {
    v22 = 0;
    do
      WriteDataReference(a2, *(_DWORD *)(*(_DWORD *)(a1 + 0x50) + 4 * v22++));
    while ( v22 < *(_DWORD *)(a1 + 0x58) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x64));
  if ( *(int *)(a1 + 0x64) >= 1 )
  {
    v23 = 0;
    do
      WriteDataReference(a2, *(_DWORD *)(*(_DWORD *)(a1 + 0x5C) + 4 * v23++));
    while ( v23 < *(_DWORD *)(a1 + 0x64) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x70));
  if ( *(int *)(a1 + 0x70) >= 1 )
  {
    v24 = 0;
    do
      WriteDataReference(a2, *(_DWORD *)(*(_DWORD *)(a1 + 0x68) + 4 * v24++));
    while ( v24 < *(_DWORD *)(a1 + 0x70) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x78));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x7C));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x80));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x84));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x20))(a2, *(unsigned __int8 *)(a1 + 0x74));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x88));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x8C));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x90));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x94));
  ForcedDrops::encode(*(_DWORD *)(a1 + 0x98), a2);
  (*(void (__fastcall **)(int, bool))(*(_DWORD *)a2 + 0x20))(a2, *(_DWORD *)(a1 + 0x9C) != 0);
  v25 = *(_DWORD *)(a1 + 0x9C);
  if ( v25 )
    TimedOffer::encode(v25, a2);
  (*(void (__fastcall **)(int, bool))(*(_DWORD *)a2 + 0x20))(a2, *(_DWORD *)(a1 + 0xA0) != 0);
  v26 = *(_DWORD *)(a1 + 0xA0);
  if ( v26 )
    TimedOffer::encode(v26, a2);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x20))(a2, *(unsigned __int8 *)(a1 + 0xA4));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0xA8));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0xAC));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0xB0));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0xB4));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0xB8));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 64))(a2, *(_DWORD *)(*(_DWORD *)(a1 + 188) + 8));
  v27 = *(_DWORD **)(a1 + 0xBC);
  if ( (int)v27[2] >= 1 )
  {
    v28 = 0;
    do
    {
      LogicOfferBundle::encode(*(_DWORD *)(*v27 + 4 * v28), a2);
      v27 = *(_DWORD **)(a1 + 0xBC);
      ++v28;
    }
    while ( v28 < v27[2] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(*(_DWORD *)(a1 + 0xC0) + 8));
  v29 = *(_DWORD **)(a1 + 0xC0);
  if ( (int)v29[2] >= 1 )
  {
    v30 = 0;
    do
    {
      AdStatus::encode(*(_DWORD *)(*v29 + 4 * v30), a2);
      v29 = *(_DWORD **)(a1 + 0xC0);
      ++v30;
    }
    while ( v30 < v29[2] );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0xC4));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0xC8));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0xD4));
  if ( *(int *)(a1 + 0xD4) >= 1 )
  {
    v31 = 0;
    do
      (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(*(_DWORD *)(a1 + 0xCC) + 4 * v31++));
    while ( v31 < *(_DWORD *)(a1 + 0xD4) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0xD8));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0xDC));
  WriteDataReference(a2, *(_DWORD *)(a1 + 0xE0));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x1C))(a2, *(_DWORD *)(a1 + 0xE8));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x1C))(a2, *(_DWORD *)(a1 + 0xEC));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0xF8));
  if ( *(int *)(a1 + 0xF8) >= 1 )
  {
    v32 = 0;
    do
      IntValueEntry::encode(*(_DWORD *)(*(_DWORD *)(a1 + 0xF0) + 4 * v32++), a2);
    while ( v32 < *(_DWORD *)(a1 + 0xF8) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x104));
  if ( *(int *)(a1 + 0x104) >= 1 )
  {
    v33 = 0;
    do
      CooldownEntry::encode(*(_DWORD *)(*(_DWORD *)(a1 + 0xFC) + 4 * v33++), a2);
    while ( v33 < *(_DWORD *)(a1 + 0x104) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x110));
  if ( *(int *)(a1 + 0x110) >= 1 )
  {
    v34 = 0;
    do
      BrawlPassSeasonData::encode(*(_DWORD *)(*(_DWORD *)(a1 + 0x108) + 4 * v34++), a2);
    while ( v34 < *(_DWORD *)(a1 + 0x110) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x11C));
  if ( *(int *)(a1 + 0x11C) >= 1 )
  {
    v35 = 0;
    do
      ProLeageSeasonData::encode(*(_DWORD *)(*(_DWORD *)(a1 + 0x114) + 4 * v35++), a2);
    while ( v35 < *(_DWORD *)(a1 + 0x11C) );
  }
  (*(void (__fastcall **)(int, bool))(*(_DWORD *)a2 + 0x20))(a2, *(_DWORD *)(a1 + 0x120) != 0);
  v36 = *(_DWORD *)(a1 + 0x120);
  if ( v36 )
    LogicQuests::encode(v36, a2);
  (*(void (__fastcall **)(int, bool))(*(_DWORD *)a2 + 0x20))(a2, *(_DWORD *)(a1 + 0x124) != 0);
  v37 = *(_DWORD *)(a1 + 0x124);
  if ( v37 )
    VanityItems::encode(v37, a2);
  (*(void (__fastcall **)(int, bool))(*(_DWORD *)a2 + 0x20))(a2, *(_DWORD *)(a1 + 0x128) != 0);
  v38 = *(_DWORD *)(a1 + 0x128);
  if ( v38 )
    LogicPlayerRankedSeasonData::encode(v38, a2);
  return (*(int (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x24))(a2, *(_DWORD *)(a1 + 0x12C));
}
