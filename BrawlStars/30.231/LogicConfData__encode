{
  int v4; // r6
  int v5; // r6
  int v6; // r6
  int v7; // r6
  int v8; // r6
  int v9; // r6
  int result; // r0
  int i; // r6

  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)a1);
  WriteVLong(a2, a1 + 4);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x18));
  if ( *(int *)(a1 + 0x18) >= 1 )
  {
    v4 = 0;
    do
      EventSlotData::encode(*(_DWORD *)(*(_DWORD *)(a1 + 0x10) + 4 * v4++), a2);
    while ( v4 < *(_DWORD *)(a1 + 0x18) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x24));
  if ( *(int *)(a1 + 0x24) >= 1 )
  {
    v5 = 0;
    do
      EventData::encode(*(_DWORD *)(*(_DWORD *)(a1 + 0x1C) + 4 * v5++), a2);
    while ( v5 < *(_DWORD *)(a1 + 0x24) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x30));
  if ( *(int *)(a1 + 0x30) >= 1 )
  {
    v6 = 0;
    do
      EventData::encode(*(_DWORD *)(*(_DWORD *)(a1 + 0x28) + 4 * v6++), a2);
    while ( v6 < *(_DWORD *)(a1 + 0x30) );
  }
  WriteVLong(a2, a1 + 0x34);
  WriteVLong(a2, a1 + 0x40);
  WriteVLong(a2, a1 + 0x4C);
  WriteVLong(a2, a1 + 0x58);
  WriteVLong(a2, a1 + 0x64);
  WriteVLong(a2, a1 + 0x70);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x20))(a2, *(unsigned __int8 *)(a1 + 0x7C));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x88));
  if ( *(int *)(a1 + 0x88) >= 1 )
  {
    v7 = 0;
    do
      ReleaseEntry::encode(*(_DWORD *)(*(_DWORD *)(a1 + 0x80) + 4 * v7++), a2);
    while ( v7 < *(_DWORD *)(a1 + 0x88) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0x94));
  if ( *(int *)(a1 + 0x94) >= 1 )
  {
    v8 = 0;
    do
      IntValueEntry::encode(*(_DWORD *)(*(_DWORD *)(a1 + 0x8C) + 4 * v8++), a2);
    while ( v8 < *(_DWORD *)(a1 + 0x94) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0xA0));
  if ( *(int *)(a1 + 0xA0) >= 1 )
  {
    v9 = 0;
    do
      TimedIntValueEntry::encode(*(_DWORD *)(*(_DWORD *)(a1 + 0x98) + 4 * v9++), a2);
    while ( v9 < *(_DWORD *)(a1 + 0xA0) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x40))(a2, *(_DWORD *)(a1 + 0xAC));
  result = *(_DWORD *)(a1 + 0xAC);
  if ( result >= 1 )
  {
    for ( i = 0; i < result; ++i )
    {
      CustomEvent::encode(*(_DWORD *)(*(_DWORD *)(a1 + 0xA4) + 4 * i), a2);
      result = *(_DWORD *)(a1 + 0xAC);
    }
  }
  return result;
}
