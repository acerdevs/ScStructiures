{
  int v4; // r6
  int v5; // r6
  int v6; // r6
  int v7; // r6
  int v8; // r6
  int v9; // r6
  int v10; // r6
  int v11; // r6
  int v12; // r6
  int v13; // r6
  int v14; // r6
  int v15; // r6
  int result; // r0
  int i; // r6

  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)a1);
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(a1 + 0xC));
  if ( *(int *)(a1 + 0xC) >= 1 )
  {
    v4 = 0;
    do
      EventSlotData::encode(*(_DWORD *)(*(_DWORD *)(a1 + 4) + 4 * v4++), a2);
    while ( v4 < *(_DWORD *)(a1 + 0xC) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(a1 + 0x18));
  if ( *(int *)(a1 + 0x18) >= 1 )
  {
    v5 = 0;
    do
      EventData::encode(*(_DWORD *)(*(_DWORD *)(a1 + 0x10) + 4 * v5++), a2);
    while ( v5 < *(_DWORD *)(a1 + 0x18) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(a1 + 0x24));
  if ( *(int *)(a1 + 0x24) >= 1 )
  {
    v6 = 0;
    do
      EventData::encode(*(_DWORD *)(*(_DWORD *)(a1 + 0x1C) + 4 * v6++), a2);
    while ( v6 < *(_DWORD *)(a1 + 0x24) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(a1 + 0x30));
  if ( *(int *)(a1 + 0x30) >= 1 )
  {
    v7 = 0;
    do
      (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(*(_DWORD *)(a1 + 0x28) + 4 * v7++));
    while ( v7 < *(_DWORD *)(a1 + 0x30) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(a1 + 0x3C));
  if ( *(int *)(a1 + 0x3C) >= 1 )
  {
    v8 = 0;
    do
      (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(*(_DWORD *)(a1 + 0x34) + 4 * v8++));
    while ( v8 < *(_DWORD *)(a1 + 0x3C) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(a1 + 0x48));
  if ( *(int *)(a1 + 0x48) >= 1 )
  {
    v9 = 0;
    do
      (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(*(_DWORD *)(a1 + 0x40) + 4 * v9++));
    while ( v9 < *(_DWORD *)(a1 + 0x48) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x20))(a2, *(unsigned __int8 *)(a1 + 0x70));
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(a1 + 0x7C));
  if ( *(int *)(a1 + 0x7C) >= 1 )
  {
    v10 = 0;
    do
      ReleaseEntry::encode(*(_DWORD *)(*(_DWORD *)(a1 + 0x74) + 4 * v10++), a2);
    while ( v10 < *(_DWORD *)(a1 + 0x7C) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(a1 + 0x88));
  if ( *(int *)(a1 + 0x88) >= 1 )
  {
    v11 = 0;
    do
      IntValueEntry::encode(*(_DWORD *)(*(_DWORD *)(a1 + 0x80) + 4 * v11++), a2);
    while ( v11 < *(_DWORD *)(a1 + 0x88) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(a1 + 0x94));
  if ( *(int *)(a1 + 0x94) >= 1 )
  {
    v12 = 0;
    do
      TimedIntValueEntry::encode(*(_DWORD *)(*(_DWORD *)(a1 + 0x8C) + 4 * v12++), a2);
    while ( v12 < *(_DWORD *)(a1 + 0x94) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(a1 + 0xA0));
  if ( *(int *)(a1 + 0xA0) >= 1 )
  {
    v13 = 0;
    do
      CustomEvent::encode(*(_DWORD *)(*(_DWORD *)(a1 + 0x98) + 4 * v13++), a2);
    while ( v13 < *(_DWORD *)(a1 + 0xA0) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(a1 + 0x54));
  if ( *(int *)(a1 + 0x54) >= 1 )
  {
    v14 = 0;
    do
      (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(*(_DWORD *)(a1 + 0x4C) + 4 * v14++));
    while ( v14 < *(_DWORD *)(a1 + 0x54) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(a1 + 0x60));
  if ( *(int *)(a1 + 0x60) >= 1 )
  {
    v15 = 0;
    do
      (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(*(_DWORD *)(a1 + 0x58) + 4 * v15++));
    while ( v15 < *(_DWORD *)(a1 + 0x60) );
  }
  (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(a1 + 0x6C));
  result = *(_DWORD *)(a1 + 0x6C);
  if ( result >= 1 )
  {
    for ( i = 0; i < result; ++i )
    {
      (*(void (__fastcall **)(int, _DWORD))(*(_DWORD *)a2 + 0x44))(a2, *(_DWORD *)(*(_DWORD *)(a1 + 0x64) + 4 * i));
      result = *(_DWORD *)(a1 + 0x6C);
    }
  }
  return result;
}
